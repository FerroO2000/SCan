/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Fri Jul  7 15:48:16 2023.
 */

#ifndef MCB_H
#define MCB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MCB_SENS_FRONT_1_FRAME_ID (0x05u)
#define MCB_SHTDWN_LINE_MID_SEC_STATUS_FRAME_ID (0x06u)
#define MCB_SHTDWN_LINE_FIN_SEC_STATUS_FRAME_ID (0x07u)
#define MCB_SENS_FRONT_2_FRAME_ID (0x10u)
#define MCB_SENS_REAR_1_FRAME_ID (0x11u)
#define MCB_D_SPACE_RTD_ACK_FRAME_ID (0x25u)
#define MCB_READY_TO_DRIVE_CONTROL_FRAME_ID (0x26u)
#define MCB_SHTDWN_LINE_INIT_SEC_STATUS_FRAME_ID (0x30u)
#define MCB_SENS_FRONT_SHUTDOWN_STATUS_FRAME_ID (0x31u)
#define MCB_TLB_BAT_INTRNL_FUNC_FRAME_ID (0x46u)
#define MCB_LV_BATTERY_PACK_CELLS_VOLTAGE1_FRAME_ID (0x100u)
#define MCB_LV_BATTERY_PACK_CELLS_VOLTAGE2_FRAME_ID (0x101u)
#define MCB_LV_BATTERY_PACK_GENERAL_DATA_FRAME_ID (0x102u)
#define MCB_BMS_LV_STATUS_FRAME_ID (0x103u)
#define MCB_LV_BATTERY_PACK_CELLS_TEMP_FRAME_ID (0x105u)
#define MCB_SENS_FRONT_3_FRAME_ID (0x120u)
#define MCB_SENS_REAR_3_FRAME_ID (0x121u)
#define MCB_D_SPACE_PERIPHERALS_CTRL_FRAME_ID (0x200u)
#define MCB_FRONT_NTCS_TEMPERATURE_FRAME_ID (0x400u)
#define MCB_SENS_REAR_NTC_FRAME_ID (0x401u)
#define MCB_SENS_REAR_2_FRAME_ID (0x402u)
#define MCB_STEERING_MOTOR_CONTROL_DEBUG_FRAME_ID (0x500u)

/* Frame lengths in bytes. */
#define MCB_SENS_FRONT_1_LENGTH (8u)
#define MCB_SHTDWN_LINE_MID_SEC_STATUS_LENGTH (2u)
#define MCB_SHTDWN_LINE_FIN_SEC_STATUS_LENGTH (2u)
#define MCB_SENS_FRONT_2_LENGTH (6u)
#define MCB_SENS_REAR_1_LENGTH (6u)
#define MCB_D_SPACE_RTD_ACK_LENGTH (1u)
#define MCB_READY_TO_DRIVE_CONTROL_LENGTH (1u)
#define MCB_SHTDWN_LINE_INIT_SEC_STATUS_LENGTH (2u)
#define MCB_SENS_FRONT_SHUTDOWN_STATUS_LENGTH (1u)
#define MCB_TLB_BAT_INTRNL_FUNC_LENGTH (8u)
#define MCB_LV_BATTERY_PACK_CELLS_VOLTAGE1_LENGTH (8u)
#define MCB_LV_BATTERY_PACK_CELLS_VOLTAGE2_LENGTH (6u)
#define MCB_LV_BATTERY_PACK_GENERAL_DATA_LENGTH (4u)
#define MCB_BMS_LV_STATUS_LENGTH (2u)
#define MCB_LV_BATTERY_PACK_CELLS_TEMP_LENGTH (8u)
#define MCB_SENS_FRONT_3_LENGTH (8u)
#define MCB_SENS_REAR_3_LENGTH (8u)
#define MCB_D_SPACE_PERIPHERALS_CTRL_LENGTH (3u)
#define MCB_FRONT_NTCS_TEMPERATURE_LENGTH (8u)
#define MCB_SENS_REAR_NTC_LENGTH (8u)
#define MCB_SENS_REAR_2_LENGTH (4u)
#define MCB_STEERING_MOTOR_CONTROL_DEBUG_LENGTH (1u)

/* Extended or standard frame types. */
#define MCB_SENS_FRONT_1_IS_EXTENDED (0)
#define MCB_SHTDWN_LINE_MID_SEC_STATUS_IS_EXTENDED (0)
#define MCB_SHTDWN_LINE_FIN_SEC_STATUS_IS_EXTENDED (0)
#define MCB_SENS_FRONT_2_IS_EXTENDED (0)
#define MCB_SENS_REAR_1_IS_EXTENDED (0)
#define MCB_D_SPACE_RTD_ACK_IS_EXTENDED (0)
#define MCB_READY_TO_DRIVE_CONTROL_IS_EXTENDED (0)
#define MCB_SHTDWN_LINE_INIT_SEC_STATUS_IS_EXTENDED (0)
#define MCB_SENS_FRONT_SHUTDOWN_STATUS_IS_EXTENDED (0)
#define MCB_TLB_BAT_INTRNL_FUNC_IS_EXTENDED (0)
#define MCB_LV_BATTERY_PACK_CELLS_VOLTAGE1_IS_EXTENDED (0)
#define MCB_LV_BATTERY_PACK_CELLS_VOLTAGE2_IS_EXTENDED (0)
#define MCB_LV_BATTERY_PACK_GENERAL_DATA_IS_EXTENDED (0)
#define MCB_BMS_LV_STATUS_IS_EXTENDED (0)
#define MCB_LV_BATTERY_PACK_CELLS_TEMP_IS_EXTENDED (0)
#define MCB_SENS_FRONT_3_IS_EXTENDED (0)
#define MCB_SENS_REAR_3_IS_EXTENDED (0)
#define MCB_D_SPACE_PERIPHERALS_CTRL_IS_EXTENDED (0)
#define MCB_FRONT_NTCS_TEMPERATURE_IS_EXTENDED (0)
#define MCB_SENS_REAR_NTC_IS_EXTENDED (0)
#define MCB_SENS_REAR_2_IS_EXTENDED (0)
#define MCB_STEERING_MOTOR_CONTROL_DEBUG_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message Sens_Front_1.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_front_1_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle_0_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle_1_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t steering_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_straingauge_voltage_m_v;
};

/**
 * Signals in message ShtdwnLineMidSecStatus.
 *
 * shutdown line middle section status
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_shtdwn_line_mid_sec_status_t {
    /**
     * Shutdown line active level @ middle section input
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shtdwn_active_lvl_mid_sec_in;

    /**
     * Shutdown line active level post AMS error relay
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shtdwn_active_lvl_post_ams_err_rly;

    /**
     * Shutdown line active level post IMD error relay
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shtdwn_active_lvl_post_imd_err_rly;

    /**
     * Shutdown line voltage level post precharge resistor of shutdown line
     *
     * Range: 0..252.1008403361344537815126050 (0..30 V)
     * Scale: 0.119
     * Offset: 0
     */
    uint8_t shtdwn_voltage_lvl_post_prch_resist;
};

/**
 * Signals in message ShtdwnLineFinSecStatus.
 *
 * shutdown line final section status
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_shtdwn_line_fin_sec_status_t {
    /**
     * Shutdown line active level @ final section input
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shtdwn_active_lvl_fin_sec_in;

    /**
     * Shutdown line voltage level post delay capacitors of shutdown line
     *
     * Range: 0..252.1008403361344537815126050 (0..30 V)
     * Scale: 0.119
     * Offset: 0
     */
    uint8_t shtdwn_voltage_lvl_post_dly_caps;
};

/**
 * Signals in message Sens_Front_2.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_front_2_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pot_fl_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pot_fr_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_pressure_voltage_m_v;
};

/**
 * Signals in message Sens_Rear_1.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_rear_1_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pot_rl_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pot_rr_voltage_rr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_pressure_rear_voltage_m_v;
};

/**
 * Signals in message dSpace_RTD_ACK.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_d_space_rtd_ack_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t ctor_en_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t rtd_en_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t reboot_fsm;
};

/**
 * Signals in message ReadyToDriveControl.
 *
 * Ready To Drive control message
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_ready_to_drive_control_t {
    /**
     * Redy To Drive Enable signal status
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ready_to_drive_en_status;
};

/**
 * Signals in message ShtdwnLineInitSecStatus.
 *
 * shutdown line initial section status
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_shtdwn_line_init_sec_status_t {
    /**
     * Shutdown line active level @ middle section input
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_shut_closed_post_bspd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_pre_funghi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_post_inv_mono;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_post_inv_fr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_bsp_din_error;
};

/**
 * Signals in message Sens_Front_ShutdownStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_front_shutdown_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_pre_inertia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_post_inertia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_post_bots;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_shut_closed_post_cockpit;
};

/**
 * Signals in message TlbBatIntrnlFunc.
 *
 * tlb battery internal functions
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_tlb_bat_intrnl_func_t {
    /**
     * AMS error latched active, disables AMS Error Relay
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_err_ltch;

    /**
     * IMD error latched active, disables IMD Error Relay
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_err_ltch;

    /**
     * Shutdown Precharge Relay Enable status, enables Shutdwon Precharge Relay
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shtdwn_prch_rly_en;

    /**
     * Shortcircuit to GND detected on AIR negative terminal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shrt2_gnd_air_neg;

    /**
     * Shortcircuit to GND detected on AIR positive terminal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shrt2_gnd_air_pos;

    /**
     * Shortcircuit to GND detected on an AIR terminal (either poisitive or negative)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shrt2_gnd_air;

    /**
     * High Voltage DC Bus, vehicle side (@ Air Positive), over 60 volt
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_bus_vehicle_side_over60_v;

    /**
     * AIR negative closed, Intentional State (signal is reliant on shutdown line beeing active)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_neg_clsd_int_state;

    /**
     * AIR positive closed, Intentional State (signal is reliant on shutdown line beeing active)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_pos_clsd_int_state;

    /**
     * High Voltage DC bus precharge relay enable, intentional state (signal is reliant on shutdown line beeing active)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_bus_prch_rly_en_int_state;

    /**
     * AIR negative closed, auxiliary/actual state (signal is reliant on shutdown line beegin active)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_neg_clsd_aux_state;

    /**
     * AIR positive closed, auxiliary/actual state (signal is reliant on shutdown line beegin active)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_pos_clsd_aux_state;

    /**
     * High Voltage DC bus precharge relay enable, auxiliary/actual state (signal is reliant on shutdown line beeing active)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_bus_prch_rly_en_aux_state;

    /**
     * AIR negative closed implausibility error active (Intentional State != Auxiliary State)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_neg_clsd_imp_err;

    /**
     * AIR positive closed implausibility error active (Intentional State != Auxiliary State)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_pos_clsd_imp_err;

    /**
     * High Voltage DC bus precharge relay enable, implausibility error active (Intentional State != Auxiliary State)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_bus_prch_rly_en_imp_err;

    /**
     * High Voltage DC Bus, vehicle side (@ Air Positive), over 60 volt, implausibility error active (more then 60V but can't be SUPER DANGER)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_bus_veh_side_over60_v_imp_err;

    /**
     * An/Any implausibility error is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t any_imp_err;

    /**
     * An/Any implausibility error is active, latched value
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t any_imp_err_ltch;

    /**
     * TSAL green enable active level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tsal_green_en_active_level;
};

/**
 * Signals in message LvBatteryPackCellsVoltage1.
 *
 * Low Voltage Battery Pack, Battery Cells Voltage message 1
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_lv_battery_pack_cells_voltage1_t {
    /**
     * Battery Cell1 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell1_voltage;

    /**
     * Battery Cell2 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell2_voltage;

    /**
     * Battery Cell3 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell3_voltage;

    /**
     * Battery Cell4 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell4_voltage;
};

/**
 * Signals in message LvBatteryPackCellsVoltage2.
 *
 * Low Voltage Battery Pack, Battery Cells Voltage message 2
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_lv_battery_pack_cells_voltage2_t {
    /**
     * Battery Cell5 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell5_voltage;

    /**
     * Battery Cell6 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell6_voltage;

    /**
     * Battery Cell7 Voltage (milliVolts)
     *
     * Range: 0..65535 (2000..4490.33 mV)
     * Scale: 0.038
     * Offset: 2000
     */
    uint16_t cell7_voltage;
};

/**
 * Signals in message LvBatteryPackGeneralData.
 *
 * General data about the low voltage battery pack
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_lv_battery_pack_general_data_t {
    /**
     * Hall Current Sensor Raw Value (Volts)
     *
     * Range: 0..65535 (0..4980.66 V)
     * Scale: 0.076
     * Offset: 0
     */
    uint16_t hall_current_sensor_raw_value;

    /**
     * Low Voltage Battery Pack total voltage at terminal ends (millivolts)
     *
     * Range: 0..65534.83146067415730337078652 (14000..31497.8 mV)
     * Scale: 0.267
     * Offset: 14000
     */
    uint16_t lv_battery_pack_total_voltage;
};

/**
 * Signals in message BmsLvStatus.
 *
 * Status form BMS-LV ECU
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_bms_lv_status_t {
    /**
     * Low Voltage Relay Closed status
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lv_rly_clsd;

    /**
     * BMS LV Status message bitset
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_lv_status_message;
};

/**
 * Signals in message LvBatteryPackCellsTemp.
 *
 * Low Voltage Battery Pack, Battery Cells Voltage message 2
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_lv_battery_pack_cells_temp_t {
    /**
     * First time sending this message flag
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t is_first_message;

    /**
     * NTC1 Resistance - monitor of Cell1 temperature
     *
     * Range: 0..1023.0016 (1000..32968.8 Ohm)
     * Scale: 31.25
     * Offset: 1000
     */
    uint16_t ntc1_resistance;

    /**
     * NTC2 Resistance - monitor of Cell2 temperature
     *
     * Range: 0..1023.0016 (1000..32968.8 Ohm)
     * Scale: 31.25
     * Offset: 1000
     */
    uint16_t ntc2_resistance;

    /**
     * NTC3 Resistance - monitor of Cell3 temperature
     *
     * Range: 0..1023.0016 (1000..32968.8 Ohm)
     * Scale: 31.25
     * Offset: 1000
     */
    uint16_t ntc3_resistance;

    /**
     * NTC4 Resistance - monitor of Cell4 temperature
     *
     * Range: 0..1023.0016 (1000..32968.8 Ohm)
     * Scale: 31.25
     * Offset: 1000
     */
    uint16_t ntc4_resistance;

    /**
     * NTC5 Resistance - monitor of Cell5 temperature
     *
     * Range: 0..1023.0016 (1000..32968.8 Ohm)
     * Scale: 31.25
     * Offset: 1000
     */
    uint16_t ntc5_resistance;

    /**
     * NTC6 Resistance - monitor of Cell6 temperature
     *
     * Range: 0..1023.0016 (1000..32968.8 Ohm)
     * Scale: 31.25
     * Offset: 1000
     */
    uint16_t ntc6_resistance;
};

/**
 * Signals in message Sens_Front_3.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_front_3_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_push_fr_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_tie_fr_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_push_fl_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_tie_fl_voltage_m_v;
};

/**
 * Signals in message Sens_Rear_3.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_rear_3_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_push_rr_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_tie_rr_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_push_rl_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t straingauge_tie_rl_voltage_m_v;
};

/**
 * Signals in message dSpace_PeripheralsCTRL.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_d_space_peripherals_ctrl_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t brake_light_on_ctrl;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rad_fan_pwm_ctrl;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_hv_fan_ctrl;
};

/**
 * Signals in message FrontNtcsTemperature.
 *
 * Temperatures of NTCs in the front of the car
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_front_ntcs_temperature_t {
    /**
     * NTC1 Resistance
     *
     * Range: 0..1023 (0..1023 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc1_resistance;

    /**
     * NTC2 Resistance
     *
     * Range: 0..1023 (0..1023 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc2_resistance;

    /**
     * NTC3 Resistance
     *
     * Range: 0..1023 (0..1023 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc3_resistance;

    /**
     * NTC4 Resistance
     *
     * Range: 0..1023 (0..1023 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc4_resistance;

    /**
     * Ntc1Spare Resistance
     *
     * Range: 0..1023 (0..1023 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc1_spare_resistance;

    /**
     * Ntc2Spare Resistance
     *
     * Range: 0..1023 (0..1023 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc2_spare_resistance;
};

/**
 * Signals in message Sens_Rear_NTC.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_rear_ntc_t {
    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc_1_resistance;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc_2_resistance;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc_3_resistance;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc_4_resistance;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc_5_resistance;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ntc_6_resistance;
};

/**
 * Signals in message Sens_Rear_2.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_sens_rear_2_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cooling_pressure_dx_voltage_m_v;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cooling_pressure_sx_voltage_m_v;
};

/**
 * Signals in message Steering_MotorControl_Debug.
 *
 * All signal values are as on the CAN bus.
 */
struct mcb_steering_motor_control_debug_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t front_left_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t front_right_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t rear_left_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t rear_right_on;
};

/**
 * Pack message Sens_Front_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_front_1_pack(
    uint8_t *dst_p,
    const struct mcb_sens_front_1_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_front_1_unpack(
    struct mcb_sens_front_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_1_throttle_0_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_1_throttle_0_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_1_throttle_0_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_1_throttle_1_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_1_throttle_1_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_1_throttle_1_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_1_steering_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_1_steering_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_1_steering_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_1_brake_straingauge_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_1_brake_straingauge_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_1_brake_straingauge_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message ShtdwnLineMidSecStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_shtdwn_line_mid_sec_status_pack(
    uint8_t *dst_p,
    const struct mcb_shtdwn_line_mid_sec_status_t *src_p,
    size_t size);

/**
 * Unpack message ShtdwnLineMidSecStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_shtdwn_line_mid_sec_status_unpack(
    struct mcb_shtdwn_line_mid_sec_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_mid_sec_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_mid_sec_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_mid_sec_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_post_ams_err_rly_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_post_ams_err_rly_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_post_ams_err_rly_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_post_imd_err_rly_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_post_imd_err_rly_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_mid_sec_status_shtdwn_active_lvl_post_imd_err_rly_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_mid_sec_status_shtdwn_voltage_lvl_post_prch_resist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_mid_sec_status_shtdwn_voltage_lvl_post_prch_resist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_mid_sec_status_shtdwn_voltage_lvl_post_prch_resist_is_in_range(uint8_t value);

/**
 * Pack message ShtdwnLineFinSecStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_shtdwn_line_fin_sec_status_pack(
    uint8_t *dst_p,
    const struct mcb_shtdwn_line_fin_sec_status_t *src_p,
    size_t size);

/**
 * Unpack message ShtdwnLineFinSecStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_shtdwn_line_fin_sec_status_unpack(
    struct mcb_shtdwn_line_fin_sec_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_fin_sec_status_shtdwn_active_lvl_fin_sec_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_fin_sec_status_shtdwn_active_lvl_fin_sec_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_fin_sec_status_shtdwn_active_lvl_fin_sec_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_fin_sec_status_shtdwn_voltage_lvl_post_dly_caps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_fin_sec_status_shtdwn_voltage_lvl_post_dly_caps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_fin_sec_status_shtdwn_voltage_lvl_post_dly_caps_is_in_range(uint8_t value);

/**
 * Pack message Sens_Front_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_front_2_pack(
    uint8_t *dst_p,
    const struct mcb_sens_front_2_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_front_2_unpack(
    struct mcb_sens_front_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_2_pot_fl_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_2_pot_fl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_2_pot_fl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_2_pot_fr_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_2_pot_fr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_2_pot_fr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_2_brake_pressure_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_2_brake_pressure_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_2_brake_pressure_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_rear_1_pack(
    uint8_t *dst_p,
    const struct mcb_sens_rear_1_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_rear_1_unpack(
    struct mcb_sens_rear_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_1_pot_rl_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_1_pot_rl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_1_pot_rl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_1_pot_rr_voltage_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_1_pot_rr_voltage_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_1_pot_rr_voltage_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_1_brake_pressure_rear_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_1_brake_pressure_rear_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_1_brake_pressure_rear_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message dSpace_RTD_ACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_d_space_rtd_ack_pack(
    uint8_t *dst_p,
    const struct mcb_d_space_rtd_ack_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_RTD_ACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_d_space_rtd_ack_unpack(
    struct mcb_d_space_rtd_ack_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_d_space_rtd_ack_ctor_en_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_d_space_rtd_ack_ctor_en_ack_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_d_space_rtd_ack_ctor_en_ack_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_d_space_rtd_ack_rtd_en_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_d_space_rtd_ack_rtd_en_ack_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_d_space_rtd_ack_rtd_en_ack_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_d_space_rtd_ack_reboot_fsm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_d_space_rtd_ack_reboot_fsm_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_d_space_rtd_ack_reboot_fsm_is_in_range(int8_t value);

/**
 * Pack message ReadyToDriveControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_ready_to_drive_control_pack(
    uint8_t *dst_p,
    const struct mcb_ready_to_drive_control_t *src_p,
    size_t size);

/**
 * Unpack message ReadyToDriveControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_ready_to_drive_control_unpack(
    struct mcb_ready_to_drive_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_ready_to_drive_control_ready_to_drive_en_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_ready_to_drive_control_ready_to_drive_en_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_ready_to_drive_control_ready_to_drive_en_status_is_in_range(uint8_t value);

/**
 * Pack message ShtdwnLineInitSecStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_shtdwn_line_init_sec_status_pack(
    uint8_t *dst_p,
    const struct mcb_shtdwn_line_init_sec_status_t *src_p,
    size_t size);

/**
 * Unpack message ShtdwnLineInitSecStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_shtdwn_line_init_sec_status_unpack(
    struct mcb_shtdwn_line_init_sec_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_init_sec_status_is_shut_closed_post_bspd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_init_sec_status_is_shut_closed_post_bspd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_init_sec_status_is_shut_closed_post_bspd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_shtdwn_line_init_sec_status_is_shut_closed_pre_funghi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_init_sec_status_is_shut_closed_pre_funghi_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_init_sec_status_is_shut_closed_pre_funghi_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_shtdwn_line_init_sec_status_is_shut_closed_post_inv_mono_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_init_sec_status_is_shut_closed_post_inv_mono_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_init_sec_status_is_shut_closed_post_inv_mono_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_shtdwn_line_init_sec_status_is_shut_closed_post_inv_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_init_sec_status_is_shut_closed_post_inv_fr_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_init_sec_status_is_shut_closed_post_inv_fr_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_shtdwn_line_init_sec_status_is_bsp_din_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_shtdwn_line_init_sec_status_is_bsp_din_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_shtdwn_line_init_sec_status_is_bsp_din_error_is_in_range(uint8_t value);

/**
 * Pack message Sens_Front_ShutdownStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_front_shutdown_status_pack(
    uint8_t *dst_p,
    const struct mcb_sens_front_shutdown_status_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_ShutdownStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_front_shutdown_status_unpack(
    struct mcb_sens_front_shutdown_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_sens_front_shutdown_status_is_shut_closed_pre_inertia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_shutdown_status_is_shut_closed_pre_inertia_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_shutdown_status_is_shut_closed_pre_inertia_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_sens_front_shutdown_status_is_shut_closed_post_inertia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_shutdown_status_is_shut_closed_post_inertia_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_shutdown_status_is_shut_closed_post_inertia_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_sens_front_shutdown_status_is_shut_closed_post_bots_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_shutdown_status_is_shut_closed_post_bots_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_shutdown_status_is_shut_closed_post_bots_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_sens_front_shutdown_status_is_shut_closed_post_cockpit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_shutdown_status_is_shut_closed_post_cockpit_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_shutdown_status_is_shut_closed_post_cockpit_is_in_range(int8_t value);

/**
 * Pack message TlbBatIntrnlFunc.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_tlb_bat_intrnl_func_pack(
    uint8_t *dst_p,
    const struct mcb_tlb_bat_intrnl_func_t *src_p,
    size_t size);

/**
 * Unpack message TlbBatIntrnlFunc.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_tlb_bat_intrnl_func_unpack(
    struct mcb_tlb_bat_intrnl_func_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_ams_err_ltch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_ams_err_ltch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_ams_err_ltch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_imd_err_ltch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_imd_err_ltch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_imd_err_ltch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_shtdwn_prch_rly_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_shtdwn_prch_rly_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_shtdwn_prch_rly_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_shrt2_gnd_air_neg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_shrt2_gnd_air_neg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_shrt2_gnd_air_neg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_shrt2_gnd_air_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_shrt2_gnd_air_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_shrt2_gnd_air_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_shrt2_gnd_air_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_shrt2_gnd_air_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_shrt2_gnd_air_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_dc_bus_vehicle_side_over60_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_dc_bus_vehicle_side_over60_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_dc_bus_vehicle_side_over60_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_air_neg_clsd_int_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_air_neg_clsd_int_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_air_neg_clsd_int_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_air_pos_clsd_int_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_air_pos_clsd_int_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_air_pos_clsd_int_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_int_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_int_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_int_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_air_neg_clsd_aux_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_air_neg_clsd_aux_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_air_neg_clsd_aux_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_air_pos_clsd_aux_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_air_pos_clsd_aux_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_air_pos_clsd_aux_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_aux_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_aux_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_aux_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_air_neg_clsd_imp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_air_neg_clsd_imp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_air_neg_clsd_imp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_air_pos_clsd_imp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_air_pos_clsd_imp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_air_pos_clsd_imp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_imp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_imp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_dc_bus_prch_rly_en_imp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_dc_bus_veh_side_over60_v_imp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_dc_bus_veh_side_over60_v_imp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_dc_bus_veh_side_over60_v_imp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_any_imp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_any_imp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_any_imp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_any_imp_err_ltch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_any_imp_err_ltch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_any_imp_err_ltch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_tlb_bat_intrnl_func_tsal_green_en_active_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_tlb_bat_intrnl_func_tsal_green_en_active_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_tlb_bat_intrnl_func_tsal_green_en_active_level_is_in_range(uint8_t value);

/**
 * Pack message LvBatteryPackCellsVoltage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_lv_battery_pack_cells_voltage1_pack(
    uint8_t *dst_p,
    const struct mcb_lv_battery_pack_cells_voltage1_t *src_p,
    size_t size);

/**
 * Unpack message LvBatteryPackCellsVoltage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_lv_battery_pack_cells_voltage1_unpack(
    struct mcb_lv_battery_pack_cells_voltage1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage1_cell1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage1_cell1_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage1_cell1_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage1_cell2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage1_cell2_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage1_cell2_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage1_cell3_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage1_cell3_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage1_cell3_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage1_cell4_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage1_cell4_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage1_cell4_voltage_is_in_range(uint16_t value);

/**
 * Pack message LvBatteryPackCellsVoltage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_lv_battery_pack_cells_voltage2_pack(
    uint8_t *dst_p,
    const struct mcb_lv_battery_pack_cells_voltage2_t *src_p,
    size_t size);

/**
 * Unpack message LvBatteryPackCellsVoltage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_lv_battery_pack_cells_voltage2_unpack(
    struct mcb_lv_battery_pack_cells_voltage2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage2_cell5_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage2_cell5_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage2_cell5_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage2_cell6_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage2_cell6_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage2_cell6_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_voltage2_cell7_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_voltage2_cell7_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_voltage2_cell7_voltage_is_in_range(uint16_t value);

/**
 * Pack message LvBatteryPackGeneralData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_lv_battery_pack_general_data_pack(
    uint8_t *dst_p,
    const struct mcb_lv_battery_pack_general_data_t *src_p,
    size_t size);

/**
 * Unpack message LvBatteryPackGeneralData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_lv_battery_pack_general_data_unpack(
    struct mcb_lv_battery_pack_general_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_general_data_hall_current_sensor_raw_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_general_data_hall_current_sensor_raw_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_general_data_hall_current_sensor_raw_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_general_data_lv_battery_pack_total_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_general_data_lv_battery_pack_total_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_general_data_lv_battery_pack_total_voltage_is_in_range(uint16_t value);

/**
 * Pack message BmsLvStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_bms_lv_status_pack(
    uint8_t *dst_p,
    const struct mcb_bms_lv_status_t *src_p,
    size_t size);

/**
 * Unpack message BmsLvStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_bms_lv_status_unpack(
    struct mcb_bms_lv_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_bms_lv_status_lv_rly_clsd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_bms_lv_status_lv_rly_clsd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_bms_lv_status_lv_rly_clsd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_bms_lv_status_bms_lv_status_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_bms_lv_status_bms_lv_status_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_bms_lv_status_bms_lv_status_message_is_in_range(uint8_t value);

/**
 * Pack message LvBatteryPackCellsTemp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_lv_battery_pack_cells_temp_pack(
    uint8_t *dst_p,
    const struct mcb_lv_battery_pack_cells_temp_t *src_p,
    size_t size);

/**
 * Unpack message LvBatteryPackCellsTemp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_lv_battery_pack_cells_temp_unpack(
    struct mcb_lv_battery_pack_cells_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_lv_battery_pack_cells_temp_is_first_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_is_first_message_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_is_first_message_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_temp_ntc1_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_ntc1_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_ntc1_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_temp_ntc2_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_ntc2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_ntc2_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_temp_ntc3_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_ntc3_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_ntc3_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_temp_ntc4_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_ntc4_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_ntc4_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_temp_ntc5_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_ntc5_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_ntc5_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_lv_battery_pack_cells_temp_ntc6_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_lv_battery_pack_cells_temp_ntc6_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_lv_battery_pack_cells_temp_ntc6_resistance_is_in_range(uint16_t value);

/**
 * Pack message Sens_Front_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_front_3_pack(
    uint8_t *dst_p,
    const struct mcb_sens_front_3_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_front_3_unpack(
    struct mcb_sens_front_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_3_straingauge_push_fr_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_3_straingauge_push_fr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_3_straingauge_push_fr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_3_straingauge_tie_fr_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_3_straingauge_tie_fr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_3_straingauge_tie_fr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_3_straingauge_push_fl_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_3_straingauge_push_fl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_3_straingauge_push_fl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_front_3_straingauge_tie_fl_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_front_3_straingauge_tie_fl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_front_3_straingauge_tie_fl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_rear_3_pack(
    uint8_t *dst_p,
    const struct mcb_sens_rear_3_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_rear_3_unpack(
    struct mcb_sens_rear_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_3_straingauge_push_rr_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_3_straingauge_push_rr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_3_straingauge_push_rr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_3_straingauge_tie_rr_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_3_straingauge_tie_rr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_3_straingauge_tie_rr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_3_straingauge_push_rl_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_3_straingauge_push_rl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_3_straingauge_push_rl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_3_straingauge_tie_rl_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_3_straingauge_tie_rl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_3_straingauge_tie_rl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message dSpace_PeripheralsCTRL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_d_space_peripherals_ctrl_pack(
    uint8_t *dst_p,
    const struct mcb_d_space_peripherals_ctrl_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_PeripheralsCTRL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_d_space_peripherals_ctrl_unpack(
    struct mcb_d_space_peripherals_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_d_space_peripherals_ctrl_brake_light_on_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_d_space_peripherals_ctrl_brake_light_on_ctrl_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_d_space_peripherals_ctrl_brake_light_on_ctrl_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_d_space_peripherals_ctrl_rad_fan_pwm_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_d_space_peripherals_ctrl_rad_fan_pwm_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_d_space_peripherals_ctrl_rad_fan_pwm_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcb_d_space_peripherals_ctrl_batt_hv_fan_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_d_space_peripherals_ctrl_batt_hv_fan_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_d_space_peripherals_ctrl_batt_hv_fan_ctrl_is_in_range(uint8_t value);

/**
 * Pack message FrontNtcsTemperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_front_ntcs_temperature_pack(
    uint8_t *dst_p,
    const struct mcb_front_ntcs_temperature_t *src_p,
    size_t size);

/**
 * Unpack message FrontNtcsTemperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_front_ntcs_temperature_unpack(
    struct mcb_front_ntcs_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_front_ntcs_temperature_ntc1_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_front_ntcs_temperature_ntc1_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_front_ntcs_temperature_ntc1_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_front_ntcs_temperature_ntc2_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_front_ntcs_temperature_ntc2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_front_ntcs_temperature_ntc2_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_front_ntcs_temperature_ntc3_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_front_ntcs_temperature_ntc3_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_front_ntcs_temperature_ntc3_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_front_ntcs_temperature_ntc4_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_front_ntcs_temperature_ntc4_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_front_ntcs_temperature_ntc4_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_front_ntcs_temperature_ntc1_spare_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_front_ntcs_temperature_ntc1_spare_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_front_ntcs_temperature_ntc1_spare_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_front_ntcs_temperature_ntc2_spare_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_front_ntcs_temperature_ntc2_spare_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_front_ntcs_temperature_ntc2_spare_resistance_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_NTC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_rear_ntc_pack(
    uint8_t *dst_p,
    const struct mcb_sens_rear_ntc_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_NTC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_rear_ntc_unpack(
    struct mcb_sens_rear_ntc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_ntc_ntc_1_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_ntc_ntc_1_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_ntc_ntc_1_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_ntc_ntc_2_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_ntc_ntc_2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_ntc_ntc_2_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_ntc_ntc_3_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_ntc_ntc_3_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_ntc_ntc_3_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_ntc_ntc_4_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_ntc_ntc_4_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_ntc_ntc_4_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_ntc_ntc_5_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_ntc_ntc_5_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_ntc_ntc_5_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_ntc_ntc_6_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_ntc_ntc_6_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_ntc_ntc_6_resistance_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_sens_rear_2_pack(
    uint8_t *dst_p,
    const struct mcb_sens_rear_2_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_sens_rear_2_unpack(
    struct mcb_sens_rear_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_2_cooling_pressure_dx_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_2_cooling_pressure_dx_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_2_cooling_pressure_dx_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcb_sens_rear_2_cooling_pressure_sx_voltage_m_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_sens_rear_2_cooling_pressure_sx_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_sens_rear_2_cooling_pressure_sx_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Steering_MotorControl_Debug.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcb_steering_motor_control_debug_pack(
    uint8_t *dst_p,
    const struct mcb_steering_motor_control_debug_t *src_p,
    size_t size);

/**
 * Unpack message Steering_MotorControl_Debug.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcb_steering_motor_control_debug_unpack(
    struct mcb_steering_motor_control_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_steering_motor_control_debug_front_left_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_steering_motor_control_debug_front_left_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_steering_motor_control_debug_front_left_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_steering_motor_control_debug_front_right_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_steering_motor_control_debug_front_right_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_steering_motor_control_debug_front_right_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_steering_motor_control_debug_rear_left_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_steering_motor_control_debug_rear_left_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_steering_motor_control_debug_rear_left_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mcb_steering_motor_control_debug_rear_right_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcb_steering_motor_control_debug_rear_right_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcb_steering_motor_control_debug_rear_right_on_is_in_range(int8_t value);


#ifdef __cplusplus
}
#endif

#endif
